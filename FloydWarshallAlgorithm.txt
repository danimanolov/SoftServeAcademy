using System;
using System.Collections.Generic;

public class FloydWarshallPathFinder
{
    private int VerticesCount;
    private int[,] EdgesLengthsMatrix;
    private int[,] ShortestPathsMatrix;

    public FloydWarshallPathFinder(int NumberOfVertices, int[,] EdgesLengths)
    {
        VerticesCount = NumberOfVertices;
        EdgesLengthsMatrix = EdgesLengths;
        ShortestPathsMatrix = null;
    }

    public int[,] FindAllPaths()
    {
        ShortestPathsMatrix = new int[VerticesCount, VerticesCount];

        for (int i = 0; i < VerticesCount; i++)
        {
            for (int t = 0; t < VerticesCount; t++)
            {
                ShortestPathsMatrix[i, t] = t;
            }
        }

        for (int k = 0; k < VerticesCount; k++)
        {
            for (int v = 0; v < VerticesCount; v++)
            {
                for (int u = 0; u < VerticesCount; u++)
                {
                    if (EdgesLengthsMatrix[u, k] + EdgesLengthsMatrix[k, v] < EdgesLengthsMatrix[u, v])
                    {
                        EdgesLengthsMatrix[u, v] = EdgesLengthsMatrix[u, k] + EdgesLengthsMatrix[k, v];
                        ShortestPathsMatrix[u, v] = ShortestPathsMatrix[u, k];
                    }
                }
            }
        }

        return ShortestPathsMatrix;
    }

    public List<Int32> FindShortestPath(int start, int end)
    {
        if (ShortestPathsMatrix == null)
        {
            FindAllPaths();
        }

        List<Int32> Path = new List<Int32>();

        while (start != end)
        {
            Path.Add(start);

            start = ShortestPathsMatrix[start, end];
        }

        Path.Add(end);

        return Path;
    }
}

public class MainClass
{
    public static void Main()
    {
        int numberOfVertices = 4;
        int[,] distanceBetweenVertices = new int[numberOfVertices, numberOfVertices];

        for (int i = 0; i < numberOfVertices; i++)
        {
            for (int t = 0; t < numberOfVertices; t++)
            {
                if (i == t)
                {
                    distanceBetweenVertices[i, t] = 0;
                }
                else
                {
                    distanceBetweenVertices[i, t] = 9999;
                }
            }
        }

        distanceBetweenVertices[0, 2] = 1;
        distanceBetweenVertices[2, 0] = 1;
        distanceBetweenVertices[1, 0] = 7;
        distanceBetweenVertices[0, 1] = 7;
        distanceBetweenVertices[1, 2] = 1;
        distanceBetweenVertices[2, 1] = 1;
        distanceBetweenVertices[2, 3] = 5;
        distanceBetweenVertices[3, 2] = 5;
        distanceBetweenVertices[3, 1] = 2;
        distanceBetweenVertices[1, 3] = 2;

        FloydWarshallPathFinder pathFinder = new FloydWarshallPathFinder(numberOfVertices, distanceBetweenVertices);

        int startNode = 0;
        int endNode = 3;
        Console.WriteLine("Path: {0}", String.Join(" -> ", pathFinder.FindShortestPath(startNode, endNode).ToArray()));
    }
}